name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.3.0)'
        required: true

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Beyond RGB ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ## Beyond RGB ${{ steps.get_version.outputs.version }}
            
            ### Downloads
            Choose the installer for your platform:
            - **macOS**: Download the `.dmg` file
            - **Linux**: Download the `.AppImage` or `.deb` file
            - **Windows**: Download the `.exe` installer
            
            ### What's New
            <!-- Add release notes here -->
            
            ### Installation
            1. Download the appropriate installer for your platform
            2. Run the installer and follow the prompts
            3. Launch Beyond RGB from your applications menu
            
            ### System Requirements
            - **macOS**: macOS 10.14 or later
            - **Linux**: Ubuntu 20.04 or later (or equivalent)
            - **Windows**: Windows 10 or later

  build-release:
    name: Build Release (${{ matrix.os }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
            asset_name: Beyond_RGB-macOS.dmg
            asset_pattern: frontend/out/make/**/*.dmg
          - os: ubuntu-latest
            platform: linux
            asset_name: Beyond_RGB-Linux.AppImage
            asset_pattern: frontend/out/make/**/*.AppImage
          - os: windows-latest
            platform: windows
            asset_name: Beyond_RGB-Windows-Setup.exe
            asset_pattern: frontend/out/make/**/*.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Sync and update submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      # ========================================
      # Platform-specific dependencies
      # ========================================
      
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            libgtk-3-dev \
            libnotify-dev \
            libnss3 \
            libxss1 \
            libxtst6 \
            xauth \
            xvfb \
            libgbm-dev \
            zip

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: |
          brew install cmake ninja

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      # ========================================
      # Node.js setup
      # ========================================
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # ========================================
      # vcpkg caching
      # ========================================
      
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            backend/vcpkg/installed
            backend/vcpkg/buildtrees
            backend/vcpkg/packages
          key: vcpkg-release-${{ matrix.platform }}-${{ hashFiles('backend/vcpkg.json') }}
          restore-keys: |
            vcpkg-release-${{ matrix.platform }}-
            vcpkg-${{ matrix.platform }}-

      # ========================================
      # Build Backend (Release Mode)
      # ========================================
      
      - name: Build Backend (macOS)
        if: matrix.platform == 'macos'
        working-directory: backend
        run: |
          chmod +x osx_config_environment.sh osx_release.sh
          ./osx_config_environment.sh
          ./osx_release.sh

      - name: Build Backend (Linux)
        if: matrix.platform == 'linux'
        working-directory: backend
        run: |
          chmod +x linux_config_environment.sh linux_release.sh
          ./linux_config_environment.sh
          ./linux_release.sh

      - name: Build Backend (Windows)
        if: matrix.platform == 'windows'
        working-directory: backend
        shell: cmd
        run: |
          call win10_release.bat

      # ========================================
      # Copy backend binary to frontend
      # ========================================
      
      - name: Copy backend to frontend (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p frontend/lib
          cp backend/build/Release/beyond-rgb-backend frontend/lib/ || cp backend/build/beyond-rgb-backend frontend/lib/

      - name: Copy backend to frontend (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir frontend\lib
          copy backend\build\Release\beyond-rgb-backend.exe frontend\lib\ || copy backend\build\beyond-rgb-backend.exe frontend\lib\

      # ========================================
      # Build and Package Frontend
      # ========================================
      
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Package Frontend
        working-directory: frontend
        run: npm run make

      # ========================================
      # Upload Release Assets
      # ========================================
      
      - name: Find Release Asset
        id: find_asset
        shell: bash
        run: |
          ASSET_PATH=$(find frontend/out/make -type f \( -name "*.dmg" -o -name "*.AppImage" -o -name "*.exe" -o -name "*.deb" \) | head -n 1)
          echo "asset_path=$ASSET_PATH" >> $GITHUB_OUTPUT
          echo "Found asset: $ASSET_PATH"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_asset.outputs.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      # ========================================
      # Upload as Artifact (Backup)
      # ========================================
      
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.platform }}
          path: ${{ steps.find_asset.outputs.asset_path }}
          retention-days: 90

