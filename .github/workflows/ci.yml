name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
            backend-script: ./osx_config_environment.sh && ./osx_build.sh Release
            artifact-name: Beyond_RGB-macOS
          - os: ubuntu-latest
            platform: linux
            backend-script: ./linux_config_environment.sh && ./linux_release.sh
            artifact-name: Beyond_RGB-Linux
          - os: windows-latest
            platform: windows
            backend-script: vcpkg_first_time_setup.bat && cmake -B ./build/Release -S . -D CMAKE_BUILD_TYPE=Release -D VCPKG_TARGET_TRIPLET=x64-windows && cmake --build ./build/Release
            artifact-name: Beyond_RGB-Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            git

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: brew install cmake ninja

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            backend/vcpkg/installed
            backend/vcpkg/buildtrees
          key: vcpkg-${{ matrix.platform }}-${{ hashFiles('backend/dependencies.txt') }}
          restore-keys: vcpkg-${{ matrix.platform }}-

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build Backend
        working-directory: backend
        run: |
          chmod +x *.sh
          ${{ matrix.backend-script }}

      - name: Run Backend Unit Tests
        working-directory: backend/build/Release
        if: matrix.platform != 'windows'
        run: |
          if [ -f "unit_tests" ]; then
            ./unit_tests
          else
            echo "Unit tests not built, skipping"
          fi

      - name: Run Backend Unit Tests (Windows)
        working-directory: backend/build/Release
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          if exist "unit_tests.exe" (
            unit_tests.exe
          ) else (
            echo Unit tests not built, skipping
          )

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run svelte-build

      - name: Upload Backend Binary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-${{ matrix.platform }}
          path: backend/build/Release/beyond-rgb-backend*
          if-no-files-found: warn
          retention-days: 7

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ All builds succeeded!"
            exit 0
          else
            echo "❌ Some builds failed"
            exit 1
          fi

