name: CI Pipeline

on:
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build lcov

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: brew install cmake ninja

      - name: Setup MSVC
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            backend/vcpkg/installed
            backend/vcpkg/buildtrees
          key: vcpkg-${{ matrix.platform }}-${{ hashFiles('backend/dependencies.txt') }}
          restore-keys: vcpkg-${{ matrix.platform }}-

      - name: Setup vcpkg cache integration
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Build Backend with Tests (macOS)
        if: matrix.platform == 'macos'
        working-directory: backend
        run: |
          chmod +x *.sh
          ./osx_config_environment.sh
          # Determine architecture
          if [ "$(uname -m)" = "arm64" ]; then
            VCPKG_TRIPLET="arm64-osx"
          else
            VCPKG_TRIPLET="x64-osx"
          fi
          cmake -B build/Debug -S . \
            -D CMAKE_BUILD_TYPE=Debug \
            -D ENABLE_TESTS=ON \
            -D ENABLE_COVERAGE=ON \
            -D VCPKG_TARGET_TRIPLET=$VCPKG_TRIPLET
          cmake --build build/Debug

      - name: Build Backend with Tests (Linux)
        if: matrix.platform == 'linux'
        working-directory: backend
        run: |
          chmod +x *.sh
          ./linux_config_environment.sh
          cmake -B build/Debug -S . \
            -D CMAKE_BUILD_TYPE=Debug \
            -D ENABLE_TESTS=ON \
            -D ENABLE_COVERAGE=ON \
            -D VCPKG_TARGET_TRIPLET=x64-linux
          cmake --build build/Debug

      - name: Install vcpkg dependencies (Windows)
        if: matrix.platform == 'windows'
        working-directory: backend
        shell: cmd
        run: |
          call win10_config_environment.bat

      - name: Build Backend with Tests (Windows)
        if: matrix.platform == 'windows'
        working-directory: backend
        shell: cmd
        run: |
          cmake -B build\Debug -S . -DVCPKG_TARGET_TRIPLET=x64-windows -DENABLE_TESTS=ON -DENABLE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug
          if errorlevel 1 exit /b 1
          cmake --build build\Debug --config Debug
          if errorlevel 1 exit /b 1

      - name: Run Backend Unit Tests (Unix)
        if: matrix.platform != 'windows'
        working-directory: backend/build/Debug
        run: |
          ./unit_tests 2>&1 | tee test_output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          
          # Parse Catch2 output and create annotations
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "::notice::Backend tests passed on ${{ matrix.platform }}"
            # Extract test summary
            TEST_SUMMARY=$(grep -E "All tests passed|test cases|assertions" test_output.log | tail -1 || echo "")
            if [ ! -z "$TEST_SUMMARY" ]; then
              echo "::notice::$TEST_SUMMARY"
            fi
          else
            echo "::error::Backend tests failed on ${{ matrix.platform }}"
            # Extract failed test details
            grep -E "FAILED|failed|error" test_output.log | while read line; do
              echo "::error::$line"
            done
          fi
          
          exit $TEST_EXIT_CODE

      - name: Run Backend Unit Tests (Windows)
        if: matrix.platform == 'windows'
        working-directory: backend/build/Debug
        shell: cmd
        run: |
          unit_tests.exe > test_output.log 2>&1
          if errorlevel 1 (
            echo ::error::Backend tests failed on windows
            type test_output.log | findstr /C:"FAILED" /C:"failed" /C:"error"
            exit /b 1
          ) else (
            echo ::notice::Backend tests passed on windows
            type test_output.log | findstr /C:"All tests passed" /C:"test cases" /C:"assertions"
          )

      - name: Generate Backend Coverage Report (Unix)
        if: matrix.platform != 'windows'
        working-directory: backend/build/Debug
        run: |
          lcov --capture --directory . --output-file coverage.info || true
          lcov --remove coverage.info \
            '/usr/*' \
            '*/vcpkg/*' \
            '*/submodules/*' \
            '*/test/*' \
            --output-file coverage.info || true
          lcov --list coverage.info || true

      - name: Upload Backend Coverage (Unix)
        if: matrix.platform != 'windows'
        uses: codecov/codecov-action@v4
        with:
          file: backend/build/Debug/coverage.info
          flags: backend,${{ matrix.platform }}
          name: backend-coverage-${{ matrix.platform }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          # Token is optional for public repos, but helps with protected branches

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run svelte-build

      - name: Run Cypress Tests
        working-directory: frontend
        env:
          COVERAGE: 'true'
        run: |
          # Start dev server in background
          npm run dev &
          DEV_PID=$!
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "Dev server is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "::error::Dev server failed to start"
              kill $DEV_PID 2>/dev/null || true
              exit 1
            fi
            sleep 2
          done
          # Run tests with coverage
          if npm run test:coverage 2>&1 | tee cypress_output.log; then
            TEST_EXIT_CODE=0
          else
            TEST_EXIT_CODE=${PIPESTATUS[0]}
          fi
          
          # Parse Cypress output and create annotations
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "::notice::Frontend Cypress tests passed on ${{ matrix.platform }}"
            # Extract test summary
            TEST_SUMMARY=$(grep -E "Tests:|Passing:|Failing:" cypress_output.log | tail -3 || echo "")
            if [ ! -z "$TEST_SUMMARY" ]; then
              echo "$TEST_SUMMARY" | while read line; do
                echo "::notice::$line"
              done
            fi
          else
            echo "::error::Frontend Cypress tests failed on ${{ matrix.platform }}"
            # Extract failed test details
            grep -E "FAILED|failing|error" cypress_output.log | while read line; do
              echo "::error::$line"
            done
          fi
          
          # Kill dev server
          kill $DEV_PID 2>/dev/null || true
          exit $TEST_EXIT_CODE

      - name: Upload Frontend Coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: frontend/coverage/lcov.info
          flags: frontend,${{ matrix.platform }}
          name: frontend-coverage-${{ matrix.platform }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          # Token is optional for public repos, but helps with protected branches

      - name: Test Summary (Unix)
        if: always() && matrix.platform != 'windows'
        run: |
          echo "## Test Results Summary - ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
          if [ -f backend/build/Debug/test_output.log ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "All tests passed|test cases|assertions|FAILED" backend/build/Debug/test_output.log | tail -5 >> $GITHUB_STEP_SUMMARY || echo "Test output not available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "Test output not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
          if [ -f frontend/cypress_output.log ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "Tests:|Passing:|Failing:" frontend/cypress_output.log | tail -5 >> $GITHUB_STEP_SUMMARY || echo "Test output not available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "Test output not available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test Summary (Windows)
        if: always() && matrix.platform == 'windows'
        shell: cmd
        run: |
          echo ## Test Results Summary - windows >> %GITHUB_STEP_SUMMARY%
          echo. >> %GITHUB_STEP_SUMMARY%
          echo ### Backend Tests >> %GITHUB_STEP_SUMMARY%
          if exist backend\build\Debug\test_output.log (
            echo ``` >> %GITHUB_STEP_SUMMARY%
            type backend\build\Debug\test_output.log | findstr /C:"All tests passed" /C:"test cases" /C:"assertions" /C:"FAILED" >> %GITHUB_STEP_SUMMARY% || echo Test output not available >> %GITHUB_STEP_SUMMARY%
            echo ``` >> %GITHUB_STEP_SUMMARY%
          ) else (
            echo Test output not available >> %GITHUB_STEP_SUMMARY%
          )
          echo. >> %GITHUB_STEP_SUMMARY%
          echo ### Frontend Tests >> %GITHUB_STEP_SUMMARY%
          if exist frontend\cypress_output.log (
            echo ``` >> %GITHUB_STEP_SUMMARY%
            type frontend\cypress_output.log | findstr /C:"Tests:" /C:"Passing:" /C:"Failing:" >> %GITHUB_STEP_SUMMARY% || echo Test output not available >> %GITHUB_STEP_SUMMARY%
            echo ``` >> %GITHUB_STEP_SUMMARY%
          ) else (
            echo Test output not available >> %GITHUB_STEP_SUMMARY%
          )

